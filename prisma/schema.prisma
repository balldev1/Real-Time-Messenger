// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  @unique ค่าไม่ซ้ำกัน / ? ค่าว่างได้ / emailVerified ยืนยันตัวตนเข้า ใช้ datetime
//เห็นข้อมูล "seen": คือชื่อคุณลักษณะ (alias) ที่ใช้เพื่อระบุความสัมพันธ์นี้  "seen" 
// เป็นชื่อคุณลักษณะเพื่อแยกและระบุความสัมพันธ์นี้จากความสัมพันธ์อื่นที่อาจมีในโมเดลเดียวกัน.
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

// เก็บข้อมูลบัญชีผู้ใช้ ระบบต่างๆ
//type: เป็นฟิลด์ที่ระบุประเภทของบัญชีผู้ใช้ เช่น "email", "google", "facebook" เป็นต้น.
//provider: เป็นฟิลด์ที่ระบุผู้ให้บริการ 
//providerAccountId เก็บรหัส
//token การรับรองตัวต้น
//user สัมพัน กับ userId อ้างอิงจาก id
//ondelete เมือผู้ใช้ถูกลบ
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) //2ตัวนี้ต้องไม่ซ้ำกัน 
}

// การสนทนา
model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String? // ชื่อกลุ่ม
  isGroup       Boolean? // การสนธนาเป็นกลุ่มหรือไม่

  messagesIds String[]  @db.ObjectId // เก็บรหัสข้อความสนทนา
  messages    Message[]

  userIds String[] @db.ObjectId // id ผู้สนทนา
  users   User[]   @relation(fields: [userIds], references: [id]) //เก็บข้อมูลทั้งหมดของusers
}

// senderId รหัสผู้ส่ง เอาไปเก็บ sender 
//ใช้ id ในการเชื่อมในmodel message
// senderที่เก็บ เก็บรหัสผู้ใช้ทีส่งข้อความ
// onDelete: Cascade เมือ ผู้ใช้ ใน Model user ถูกลบออกจากระบบ ข้อความผู้ใช้นั้นจะถูกลบไปด้วย 
// sender <=> User คือเชื่อมโยงกัน
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId //เห็น
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId //การสนทนา
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId // การส่ง
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
